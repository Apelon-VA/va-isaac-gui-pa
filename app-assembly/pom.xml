<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>gov.vha.isaac.gui.pa</groupId>
		<artifactId>va-isaac-gui-pa-parent</artifactId>
		<version>Sprint_26-SNAPSHOT</version>
	</parent>
	<groupId>gov.vha.isaac.gui.pa.modules</groupId>
	<artifactId>app-assembly</artifactId>
	<packaging>jar</packaging>

	<name>ISAAC Application Assembly</name>
	<description>Assembles specified ISAAC modules and configuration into an application.</description>

	<properties>
		<!-- To make the Export Run you must pass -DskipExportAssembly=false -->
		<skipExportAssembly>true</skipExportAssembly>
	</properties>

	<dependencies>

		<!-- Configuration module. -->
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>config</artifactId>
			<version>${project.parent.version}</version>
		</dependency>

		<!-- ISAAC Application GUI. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>app</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Import Export. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>import-export</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Content request. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>content-request</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Taxonomy View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>taxonomy-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Concept View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>concept-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Search View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>search-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Lego View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>lego-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC Info Model View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>info-model-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- ISAAC List / Batch View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>list-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- Workflow View. -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>workflow</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>
		
		<!-- Logic View  -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>logic-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- Mapping GUI integration -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>mapping</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- Sync GUI integration -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>sync-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- Only one of the following is required - GIT or SVN - but no harm comes 
			from having both the correct implementation will be selected based on the 
			sync configuration in app.xml - changeSetUrlType parameter -->
		<!-- Sync GIT integration -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>sync-git</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<!-- Sync SVN integration -->
		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>sync-svn</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>

		<dependency>
			<groupId>gov.vha.isaac.gui.modules</groupId>
			<artifactId>concept-wizard-view</artifactId>
			<version>${va-isaac-gui.version}</version>
		</dependency>
		
		<!-- Need to override the scope on these 3 logging packages -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<scope>compile</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<scope>compile</scope>
		</dependency>
		
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jul</artifactId>
			<scope>compile</scope>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Ideally, we would just say <packaging>jar</packaging> but that causes issues for Eclipse and Netbeans...
			So we leave it as jar, but then disable the jar plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<skipIfEmpty>true</skipIfEmpty>
				</configuration>
			</plugin>
		
			<!-- Assembly the basic app (sans DB or profile info) in a build folder -->
			<plugin>
				<!-- metadata we want in the output package -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>copy metadata files</id>
						<phase>generate-sources</phase>
						<configuration>
							<target>
								<!-- Copy the things necessary to reproduce the build -->
								<copy filtering="false" toDir="${project.basedir}/target/isaac-app/META-INF/maven/${project.groupId}/${project.artifactId}/">
									<fileset dir="${basedir}">
										<include name="*.txt" />
										<include name="*.xml" />
									</fileset>
									<fileset dir="${basedir}">
										<include name="src/**/*" />
									</fileset>
								</copy>

								<!-- Create a file with the active build properties -->
								<echoproperties destfile="${project.basedir}/target/isaac-app/META-INF/maven/${project.groupId}/${project.artifactId}/pom.properties" />

								<!-- Setup the manifest, copy the license files -->
								<copy filtering="false" toDir="${project.basedir}/target/isaac-app/META-INF/">
									<fileset dir="${basedir}">
										<include name="LICENSE.txt" />
										<include name="NOTICE.txt" />
									</fileset>
								</copy>

								<!-- Write a manifest file, with properties filled in -->
								<copy filtering="true" toDir="${project.basedir}/target/isaac-app/META-INF/">
									<fileset dir="${basedir}/src/assembly/">
										<include name="MANIFEST.MF" />
									</fileset>
									<filterset begintoken="${" endtoken="}" filtersfile="${project.basedir}/target/isaac-app/META-INF/maven/${project.groupId}/${project.artifactId}/pom.properties" />
								</copy>
							</target>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<phase>generate-sources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}/target/isaac-app/lib</outputDirectory>
							<includeScope>runtime</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>zip</id>
						<goals>
							<goal>single</goal>
						</goals>
						<phase>compile</phase> <!-- Need to build this zip before things are added below, in later phases -->
						<configuration>
							<descriptors>
								<descriptor>${project.basedir}/src/assembly/assembly.xml</descriptor>
							</descriptors>
							<appendAssemblyId>false</appendAssemblyId>
							<finalName>isaac-app</finalName>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- If a user wants to just build the small zip, and not do any DB stuff, 
			they should set the parameter '-DskipDB' -->
		<profile>
			<activation>
				<activeByDefault>false</activeByDefault>
				<property>
					<name>!skipDB</name>  <!-- Hack maven, which still doesn't allow chaining of profiles. What year is this? -->
				</property>
			</activation>
			<id>zipWithDB</id>
			<build>
				<plugins>
					<!-- Unpack database, and configuration details -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack-db-and-users</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<!-- unzip the config module, so we can get the users.xml file out of it -->
										<artifactItem>
											<groupId>${project.groupId}</groupId>
											<artifactId>config</artifactId>
											<version>${project.parent.version}</version>
											<outputDirectory>${project.build.directory}/config/</outputDirectory>
										</artifactItem>

										<!-- The database to start with -->
										<artifactItem>
											<groupId>${dbGroupId}</groupId>
											<artifactId>${dbArtifactId}</artifactId>
											<version>${dbVersion}</version>
											<classifier>${dbClassifier}</classifier>
											<type>cradle.zip</type>
											<outputDirectory>${project.build.directory}/isaac-app/</outputDirectory>
										</artifactItem>
										
										<!-- The corresponding index -->
										<artifactItem>
											<groupId>${dbGroupId}</groupId>
											<artifactId>${dbArtifactId}</artifactId>
											<version>${dbVersion}</version>
											<classifier>${dbClassifier}</classifier>
											<type>lucene.zip</type>
											<outputDirectory>${project.build.directory}/isaac-app/</outputDirectory>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>gov.vha.isaac.gui.modules</groupId>
						<artifactId>mojos</artifactId>
						<version>${va-isaac-gui.version}</version>
						<dependencies>
							<!-- Only one of the following is required - GIT or SVN - but no harm comes 
							from having both - the correct implementation will be selected based on the 
							sync configuration in app.xml - changeSetUrlType parameter -->
							
							<!-- Sync GIT integration -->
							<dependency>
								<groupId>gov.vha.isaac.gui.modules</groupId>
								<artifactId>sync-git</artifactId>
								<version>${va-isaac-gui.version}</version>
							</dependency>
					
							<!-- Sync SVN integration -->
							<dependency>
								<groupId>gov.vha.isaac.gui.modules</groupId>
								<artifactId>sync-svn</artifactId>
								<version>${va-isaac-gui.version}</version>
							</dependency>
						</dependencies>
						<executions>
							<!-- See https://raw.githubusercontent.com/IHTSDO/ISAAC/master/mojos/src/main/java/gov/va/isaac/mojos/profileSync/ProfilesMojoBase.java 
								for details on how authentication is handled for this. This execution only runs if changeSetUrl and changeSetUrlType are defined 
								in app.xml To skip SCM steps for profiles entirely, specify '-DprofileSyncDisable=true' -->
							<execution>
								<id>get-and-link-profiles-scm</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>get-and-link-profiles-scm</goal>
								</goals>
								<configuration>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
									<appXMLFile>${project.build.directory}/config/app.xml</appXMLFile>
									<!--Depending on the SCM implementation, there are multiple ways to handle this auth, see comments above -->
									<!--profileSyncUsername></profileSyncUsername> 
									<profileSyncPassword></profileSyncPassword -->
								</configuration>
							</execution>

							<!-- generate user profiles -->
							<execution>
								<id>setup</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>setup-terminology-store</goal>
								</goals>
								<configuration>
									<dataStoreLocation>${project.build.directory}/isaac-app/</dataStoreLocation>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
								</configuration>
							</execution>

							<execution>
								<id>create-users</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>create-users</goal>
								</goals>
								<configuration>
									<usersFileLocation>${project.build.directory}/config/users.xml</usersFileLocation>
								</configuration>
							</execution>

							<!-- See https://raw.githubusercontent.com/IHTSDO/ISAAC/master/mojos/src/main/java/gov/va/isaac/mojos/profileSync/ProfilesMojoBase.java 
								for details on how authentication is handled for this. This execution only 
								runs if changeSetUrl and changeSetUrlType are defined in app.xml To skip 
								SCM steps for profiles entirely, specify '-DprofileSyncDisable=true' -->
							<execution>
								<id>add-commit-and-push-profiles-scm</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>add-commit-and-push-profiles-scm</goal>
								</goals>
								<configuration>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
									<appXMLFile>${project.build.directory}/config/app.xml</appXMLFile>
									<!--Depending on the SCM implementation, there are multiple ways 
										to handle this auth, see comments above -->
									<!--profileSyncUsername></profileSyncUsername> 
									<profileSyncPassword></profileSyncPassword -->
								</configuration>
							</execution>

							<!-- Process any existing changeset (*.eccs) files into the DB -->
							<execution>
								<id>process-changesets</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>process-changesets</goal>
								</goals>
								<configuration>
									<userProfileFolderLocation>${project.build.directory}/isaac-app/profiles/</userProfileFolderLocation>
								</configuration>
							</execution>

							<!-- Export Mojo -->
							<!-- To make this Run you must pass -DskipExportAssembly=false -->
							<execution>
								<id>export</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>release-export</goal>
								</goals>
								<configuration>
									<!-- Required -->
									<outputFolder>${project.build.directory}/export/</outputFolder>
									<skipExportAssembly>${skipExportAssembly}</skipExportAssembly>

									<exportType>
										<exportType>SNAPSHOT</exportType>
									</exportType>

									<path>
										<fsn>ISAAC development path</fsn>
										<uuid>32d7e06d-c8ae-516d-8a33-df5bcc9c9ec7</uuid>
									</path>
									
									<uscrsDateFilter>2005-10-06 2:22:55.1 PM</uscrsDateFilter>
									
									<exportFormat>uscrs</exportFormat>
									
									<modules>
										<module>bf291637-8f18-38a3-8cc9-fc28927d68ad</module>
										<module>1b4f1ba5-b725-390f-8c3b-33ec7096bdca</module>
									</modules>
								</configuration>
							</execution>

							<execution>
								<id>shutdown</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>shutdown-terminology-store</goal>
								</goals>
								<configuration>
									<moveToReadOnly>false</moveToReadOnly>
								</configuration>
							</execution>
						</executions>

					</plugin>

					<!-- Package into a ZIP file with the DB. -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<id>zip-with-DB</id>
								<goals>
									<goal>attached</goal>
								</goals>
								<phase>package</phase>
								<configuration>
									<descriptors>
										<descriptor>${project.basedir}/src/assembly/assembly-withDB.xml</descriptor>
									</descriptors>
									<finalName>isaac-app</finalName>
									<classifier>with-DB</classifier>
								</configuration>
							</execution>

							<execution>
								<id>zipOutput</id>
								<goals>
									<goal>attached</goal>
								</goals>
								<phase>package</phase>
								<configuration>
									<skipAssembly>${skipExportAssembly}</skipAssembly>
									<descriptors>
										<descriptor>${project.basedir}/src/assembly/export-assembly.xml</descriptor>
									</descriptors>
									<finalName>content-export</finalName>
									<classifier>delta</classifier>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

		</profile>

		<profile>
			<!-- This profile depends on zipWithDB being run -->
			<id>installer</id>
			<build>
				<plugins>
					<!-- Create filtered Install4J configuration. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.7</version>
						<executions>
							<execution>
								<id>install4j-resources</id>
								<phase>prepare-package</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/install4j</outputDirectory>
									<resources>
										<resource>
											<directory>${project.basedir}/src/main/install4j</directory>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>com.google.code.maven-install4j</groupId>
						<artifactId>maven-install4j-plugin</artifactId>
						<version>0.1.1</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>compile</goal>
								</goals>
								<configuration>
									<configFile>${project.build.directory}/install4j/Installer.install4j</configFile>
									<executable>install4jc</executable>
									<compilerVariables>
										<property>
											<name>project.version</name>
											<value>${project.version}</value>
										</property>
									</compilerVariables>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-installers</id>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>${project.build.directory}/install4j/isaac-app_macos_${project.version}.dmg</file>
											<type>dmg</type>
											<classifier>installer_x64</classifier>
										</artifact>
										<artifact>
											<file>${project.build.directory}/install4j/isaac-app_windows-x64_${project.version}.exe</file>
											<type>exe</type>
											<classifier>installer_x64</classifier>
										</artifact>
										<artifact>
											<file>${project.build.directory}/install4j/isaac-app_unix_${project.version}.sh</file>
											<type>sh</type>
											<classifier>installer_x64</classifier>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
